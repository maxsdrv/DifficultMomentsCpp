// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Students.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Students_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Students_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Students_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Students_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Students_2eproto;
namespace Entity {
class FullName;
struct FullNameDefaultTypeInternal;
extern FullNameDefaultTypeInternal _FullName_default_instance_;
class Student;
struct StudentDefaultTypeInternal;
extern StudentDefaultTypeInternal _Student_default_instance_;
class StudentsGroup;
struct StudentsGroupDefaultTypeInternal;
extern StudentsGroupDefaultTypeInternal _StudentsGroup_default_instance_;
}  // namespace Entity
PROTOBUF_NAMESPACE_OPEN
template<> ::Entity::FullName* Arena::CreateMaybeMessage<::Entity::FullName>(Arena*);
template<> ::Entity::Student* Arena::CreateMaybeMessage<::Entity::Student>(Arena*);
template<> ::Entity::StudentsGroup* Arena::CreateMaybeMessage<::Entity::StudentsGroup>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Entity {

// ===================================================================

class FullName final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Entity.FullName) */ {
 public:
  inline FullName() : FullName(nullptr) {}
  ~FullName() override;
  explicit constexpr FullName(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FullName(const FullName& from);
  FullName(FullName&& from) noexcept
    : FullName() {
    *this = ::std::move(from);
  }

  inline FullName& operator=(const FullName& from) {
    CopyFrom(from);
    return *this;
  }
  inline FullName& operator=(FullName&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FullName& default_instance() {
    return *internal_default_instance();
  }
  static inline const FullName* internal_default_instance() {
    return reinterpret_cast<const FullName*>(
               &_FullName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FullName& a, FullName& b) {
    a.Swap(&b);
  }
  inline void Swap(FullName* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FullName* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FullName* New() const final {
    return new FullName();
  }

  FullName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FullName>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FullName& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FullName& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FullName* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Entity.FullName";
  }
  protected:
  explicit FullName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFirstNameFieldNumber = 2,
    kLastNameFieldNumber = 3,
    kPatronymicFieldNumber = 4,
    kFullnameFieldNumber = 1,
  };
  // string firstName = 2;
  void clear_firstname();
  const std::string& firstname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_firstname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_firstname();
  PROTOBUF_MUST_USE_RESULT std::string* release_firstname();
  void set_allocated_firstname(std::string* firstname);
  private:
  const std::string& _internal_firstname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_firstname(const std::string& value);
  std::string* _internal_mutable_firstname();
  public:

  // string lastName = 3;
  void clear_lastname();
  const std::string& lastname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lastname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lastname();
  PROTOBUF_MUST_USE_RESULT std::string* release_lastname();
  void set_allocated_lastname(std::string* lastname);
  private:
  const std::string& _internal_lastname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lastname(const std::string& value);
  std::string* _internal_mutable_lastname();
  public:

  // optional string patronymic = 4;
  bool has_patronymic() const;
  private:
  bool _internal_has_patronymic() const;
  public:
  void clear_patronymic();
  const std::string& patronymic() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_patronymic(ArgT0&& arg0, ArgT... args);
  std::string* mutable_patronymic();
  PROTOBUF_MUST_USE_RESULT std::string* release_patronymic();
  void set_allocated_patronymic(std::string* patronymic);
  private:
  const std::string& _internal_patronymic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_patronymic(const std::string& value);
  std::string* _internal_mutable_patronymic();
  public:

  // .Entity.FullName fullname = 1;
  bool has_fullname() const;
  private:
  bool _internal_has_fullname() const;
  public:
  void clear_fullname();
  const ::Entity::FullName& fullname() const;
  PROTOBUF_MUST_USE_RESULT ::Entity::FullName* release_fullname();
  ::Entity::FullName* mutable_fullname();
  void set_allocated_fullname(::Entity::FullName* fullname);
  private:
  const ::Entity::FullName& _internal_fullname() const;
  ::Entity::FullName* _internal_mutable_fullname();
  public:
  void unsafe_arena_set_allocated_fullname(
      ::Entity::FullName* fullname);
  ::Entity::FullName* unsafe_arena_release_fullname();

  // @@protoc_insertion_point(class_scope:Entity.FullName)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr firstname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lastname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr patronymic_;
  ::Entity::FullName* fullname_;
  friend struct ::TableStruct_Students_2eproto;
};
// -------------------------------------------------------------------

class Student final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Entity.Student) */ {
 public:
  inline Student() : Student(nullptr) {}
  ~Student() override;
  explicit constexpr Student(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Student(const Student& from);
  Student(Student&& from) noexcept
    : Student() {
    *this = ::std::move(from);
  }

  inline Student& operator=(const Student& from) {
    CopyFrom(from);
    return *this;
  }
  inline Student& operator=(Student&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Student& default_instance() {
    return *internal_default_instance();
  }
  static inline const Student* internal_default_instance() {
    return reinterpret_cast<const Student*>(
               &_Student_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Student& a, Student& b) {
    a.Swap(&b);
  }
  inline void Swap(Student* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Student* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Student* New() const final {
    return new Student();
  }

  Student* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Student>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Student& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Student& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Student* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Entity.Student";
  }
  protected:
  explicit Student(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArrayRatingsFieldNumber = 3,
    kStudentFieldNumber = 1,
    kFullnameFieldNumber = 2,
    kAverageFieldNumber = 4,
  };
  // repeated int32 arrayRatings = 3;
  int arrayratings_size() const;
  private:
  int _internal_arrayratings_size() const;
  public:
  void clear_arrayratings();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_arrayratings(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_arrayratings() const;
  void _internal_add_arrayratings(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_arrayratings();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 arrayratings(int index) const;
  void set_arrayratings(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_arrayratings(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      arrayratings() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_arrayratings();

  // .Entity.Student student = 1;
  bool has_student() const;
  private:
  bool _internal_has_student() const;
  public:
  void clear_student();
  const ::Entity::Student& student() const;
  PROTOBUF_MUST_USE_RESULT ::Entity::Student* release_student();
  ::Entity::Student* mutable_student();
  void set_allocated_student(::Entity::Student* student);
  private:
  const ::Entity::Student& _internal_student() const;
  ::Entity::Student* _internal_mutable_student();
  public:
  void unsafe_arena_set_allocated_student(
      ::Entity::Student* student);
  ::Entity::Student* unsafe_arena_release_student();

  // .Entity.FullName fullname = 2;
  bool has_fullname() const;
  private:
  bool _internal_has_fullname() const;
  public:
  void clear_fullname();
  const ::Entity::FullName& fullname() const;
  PROTOBUF_MUST_USE_RESULT ::Entity::FullName* release_fullname();
  ::Entity::FullName* mutable_fullname();
  void set_allocated_fullname(::Entity::FullName* fullname);
  private:
  const ::Entity::FullName& _internal_fullname() const;
  ::Entity::FullName* _internal_mutable_fullname();
  public:
  void unsafe_arena_set_allocated_fullname(
      ::Entity::FullName* fullname);
  ::Entity::FullName* unsafe_arena_release_fullname();

  // int32 average = 4;
  void clear_average();
  ::PROTOBUF_NAMESPACE_ID::int32 average() const;
  void set_average(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_average() const;
  void _internal_set_average(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Entity.Student)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > arrayratings_;
  mutable std::atomic<int> _arrayratings_cached_byte_size_;
  ::Entity::Student* student_;
  ::Entity::FullName* fullname_;
  ::PROTOBUF_NAMESPACE_ID::int32 average_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Students_2eproto;
};
// -------------------------------------------------------------------

class StudentsGroup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Entity.StudentsGroup) */ {
 public:
  inline StudentsGroup() : StudentsGroup(nullptr) {}
  ~StudentsGroup() override;
  explicit constexpr StudentsGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StudentsGroup(const StudentsGroup& from);
  StudentsGroup(StudentsGroup&& from) noexcept
    : StudentsGroup() {
    *this = ::std::move(from);
  }

  inline StudentsGroup& operator=(const StudentsGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline StudentsGroup& operator=(StudentsGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StudentsGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const StudentsGroup* internal_default_instance() {
    return reinterpret_cast<const StudentsGroup*>(
               &_StudentsGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StudentsGroup& a, StudentsGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(StudentsGroup* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StudentsGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StudentsGroup* New() const final {
    return new StudentsGroup();
  }

  StudentsGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StudentsGroup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StudentsGroup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StudentsGroup& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StudentsGroup* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Entity.StudentsGroup";
  }
  protected:
  explicit StudentsGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArrayStudentsFieldNumber = 2,
    kStudentsGroupFieldNumber = 1,
  };
  // repeated .Entity.Student arrayStudents = 2;
  int arraystudents_size() const;
  private:
  int _internal_arraystudents_size() const;
  public:
  void clear_arraystudents();
  ::Entity::Student* mutable_arraystudents(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Entity::Student >*
      mutable_arraystudents();
  private:
  const ::Entity::Student& _internal_arraystudents(int index) const;
  ::Entity::Student* _internal_add_arraystudents();
  public:
  const ::Entity::Student& arraystudents(int index) const;
  ::Entity::Student* add_arraystudents();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Entity::Student >&
      arraystudents() const;

  // .Entity.StudentsGroup students_group = 1;
  bool has_students_group() const;
  private:
  bool _internal_has_students_group() const;
  public:
  void clear_students_group();
  const ::Entity::StudentsGroup& students_group() const;
  PROTOBUF_MUST_USE_RESULT ::Entity::StudentsGroup* release_students_group();
  ::Entity::StudentsGroup* mutable_students_group();
  void set_allocated_students_group(::Entity::StudentsGroup* students_group);
  private:
  const ::Entity::StudentsGroup& _internal_students_group() const;
  ::Entity::StudentsGroup* _internal_mutable_students_group();
  public:
  void unsafe_arena_set_allocated_students_group(
      ::Entity::StudentsGroup* students_group);
  ::Entity::StudentsGroup* unsafe_arena_release_students_group();

  // @@protoc_insertion_point(class_scope:Entity.StudentsGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Entity::Student > arraystudents_;
  ::Entity::StudentsGroup* students_group_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Students_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FullName

// .Entity.FullName fullname = 1;
inline bool FullName::_internal_has_fullname() const {
  return this != internal_default_instance() && fullname_ != nullptr;
}
inline bool FullName::has_fullname() const {
  return _internal_has_fullname();
}
inline void FullName::clear_fullname() {
  if (GetArenaForAllocation() == nullptr && fullname_ != nullptr) {
    delete fullname_;
  }
  fullname_ = nullptr;
}
inline const ::Entity::FullName& FullName::_internal_fullname() const {
  const ::Entity::FullName* p = fullname_;
  return p != nullptr ? *p : reinterpret_cast<const ::Entity::FullName&>(
      ::Entity::_FullName_default_instance_);
}
inline const ::Entity::FullName& FullName::fullname() const {
  // @@protoc_insertion_point(field_get:Entity.FullName.fullname)
  return _internal_fullname();
}
inline void FullName::unsafe_arena_set_allocated_fullname(
    ::Entity::FullName* fullname) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fullname_);
  }
  fullname_ = fullname;
  if (fullname) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Entity.FullName.fullname)
}
inline ::Entity::FullName* FullName::release_fullname() {
  
  ::Entity::FullName* temp = fullname_;
  fullname_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Entity::FullName* FullName::unsafe_arena_release_fullname() {
  // @@protoc_insertion_point(field_release:Entity.FullName.fullname)
  
  ::Entity::FullName* temp = fullname_;
  fullname_ = nullptr;
  return temp;
}
inline ::Entity::FullName* FullName::_internal_mutable_fullname() {
  
  if (fullname_ == nullptr) {
    auto* p = CreateMaybeMessage<::Entity::FullName>(GetArenaForAllocation());
    fullname_ = p;
  }
  return fullname_;
}
inline ::Entity::FullName* FullName::mutable_fullname() {
  ::Entity::FullName* _msg = _internal_mutable_fullname();
  // @@protoc_insertion_point(field_mutable:Entity.FullName.fullname)
  return _msg;
}
inline void FullName::set_allocated_fullname(::Entity::FullName* fullname) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete fullname_;
  }
  if (fullname) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Entity::FullName>::GetOwningArena(fullname);
    if (message_arena != submessage_arena) {
      fullname = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fullname, submessage_arena);
    }
    
  } else {
    
  }
  fullname_ = fullname;
  // @@protoc_insertion_point(field_set_allocated:Entity.FullName.fullname)
}

// string firstName = 2;
inline void FullName::clear_firstname() {
  firstname_.ClearToEmpty();
}
inline const std::string& FullName::firstname() const {
  // @@protoc_insertion_point(field_get:Entity.FullName.firstName)
  return _internal_firstname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FullName::set_firstname(ArgT0&& arg0, ArgT... args) {
 
 firstname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Entity.FullName.firstName)
}
inline std::string* FullName::mutable_firstname() {
  std::string* _s = _internal_mutable_firstname();
  // @@protoc_insertion_point(field_mutable:Entity.FullName.firstName)
  return _s;
}
inline const std::string& FullName::_internal_firstname() const {
  return firstname_.Get();
}
inline void FullName::_internal_set_firstname(const std::string& value) {
  
  firstname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FullName::_internal_mutable_firstname() {
  
  return firstname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FullName::release_firstname() {
  // @@protoc_insertion_point(field_release:Entity.FullName.firstName)
  return firstname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FullName::set_allocated_firstname(std::string* firstname) {
  if (firstname != nullptr) {
    
  } else {
    
  }
  firstname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), firstname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Entity.FullName.firstName)
}

// string lastName = 3;
inline void FullName::clear_lastname() {
  lastname_.ClearToEmpty();
}
inline const std::string& FullName::lastname() const {
  // @@protoc_insertion_point(field_get:Entity.FullName.lastName)
  return _internal_lastname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FullName::set_lastname(ArgT0&& arg0, ArgT... args) {
 
 lastname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Entity.FullName.lastName)
}
inline std::string* FullName::mutable_lastname() {
  std::string* _s = _internal_mutable_lastname();
  // @@protoc_insertion_point(field_mutable:Entity.FullName.lastName)
  return _s;
}
inline const std::string& FullName::_internal_lastname() const {
  return lastname_.Get();
}
inline void FullName::_internal_set_lastname(const std::string& value) {
  
  lastname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FullName::_internal_mutable_lastname() {
  
  return lastname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FullName::release_lastname() {
  // @@protoc_insertion_point(field_release:Entity.FullName.lastName)
  return lastname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FullName::set_allocated_lastname(std::string* lastname) {
  if (lastname != nullptr) {
    
  } else {
    
  }
  lastname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lastname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Entity.FullName.lastName)
}

// optional string patronymic = 4;
inline bool FullName::_internal_has_patronymic() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FullName::has_patronymic() const {
  return _internal_has_patronymic();
}
inline void FullName::clear_patronymic() {
  patronymic_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FullName::patronymic() const {
  // @@protoc_insertion_point(field_get:Entity.FullName.patronymic)
  return _internal_patronymic();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FullName::set_patronymic(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 patronymic_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Entity.FullName.patronymic)
}
inline std::string* FullName::mutable_patronymic() {
  std::string* _s = _internal_mutable_patronymic();
  // @@protoc_insertion_point(field_mutable:Entity.FullName.patronymic)
  return _s;
}
inline const std::string& FullName::_internal_patronymic() const {
  return patronymic_.Get();
}
inline void FullName::_internal_set_patronymic(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  patronymic_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FullName::_internal_mutable_patronymic() {
  _has_bits_[0] |= 0x00000001u;
  return patronymic_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FullName::release_patronymic() {
  // @@protoc_insertion_point(field_release:Entity.FullName.patronymic)
  if (!_internal_has_patronymic()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return patronymic_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FullName::set_allocated_patronymic(std::string* patronymic) {
  if (patronymic != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  patronymic_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), patronymic,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Entity.FullName.patronymic)
}

// -------------------------------------------------------------------

// Student

// .Entity.Student student = 1;
inline bool Student::_internal_has_student() const {
  return this != internal_default_instance() && student_ != nullptr;
}
inline bool Student::has_student() const {
  return _internal_has_student();
}
inline void Student::clear_student() {
  if (GetArenaForAllocation() == nullptr && student_ != nullptr) {
    delete student_;
  }
  student_ = nullptr;
}
inline const ::Entity::Student& Student::_internal_student() const {
  const ::Entity::Student* p = student_;
  return p != nullptr ? *p : reinterpret_cast<const ::Entity::Student&>(
      ::Entity::_Student_default_instance_);
}
inline const ::Entity::Student& Student::student() const {
  // @@protoc_insertion_point(field_get:Entity.Student.student)
  return _internal_student();
}
inline void Student::unsafe_arena_set_allocated_student(
    ::Entity::Student* student) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(student_);
  }
  student_ = student;
  if (student) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Entity.Student.student)
}
inline ::Entity::Student* Student::release_student() {
  
  ::Entity::Student* temp = student_;
  student_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Entity::Student* Student::unsafe_arena_release_student() {
  // @@protoc_insertion_point(field_release:Entity.Student.student)
  
  ::Entity::Student* temp = student_;
  student_ = nullptr;
  return temp;
}
inline ::Entity::Student* Student::_internal_mutable_student() {
  
  if (student_ == nullptr) {
    auto* p = CreateMaybeMessage<::Entity::Student>(GetArenaForAllocation());
    student_ = p;
  }
  return student_;
}
inline ::Entity::Student* Student::mutable_student() {
  ::Entity::Student* _msg = _internal_mutable_student();
  // @@protoc_insertion_point(field_mutable:Entity.Student.student)
  return _msg;
}
inline void Student::set_allocated_student(::Entity::Student* student) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete student_;
  }
  if (student) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Entity::Student>::GetOwningArena(student);
    if (message_arena != submessage_arena) {
      student = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, student, submessage_arena);
    }
    
  } else {
    
  }
  student_ = student;
  // @@protoc_insertion_point(field_set_allocated:Entity.Student.student)
}

// .Entity.FullName fullname = 2;
inline bool Student::_internal_has_fullname() const {
  return this != internal_default_instance() && fullname_ != nullptr;
}
inline bool Student::has_fullname() const {
  return _internal_has_fullname();
}
inline void Student::clear_fullname() {
  if (GetArenaForAllocation() == nullptr && fullname_ != nullptr) {
    delete fullname_;
  }
  fullname_ = nullptr;
}
inline const ::Entity::FullName& Student::_internal_fullname() const {
  const ::Entity::FullName* p = fullname_;
  return p != nullptr ? *p : reinterpret_cast<const ::Entity::FullName&>(
      ::Entity::_FullName_default_instance_);
}
inline const ::Entity::FullName& Student::fullname() const {
  // @@protoc_insertion_point(field_get:Entity.Student.fullname)
  return _internal_fullname();
}
inline void Student::unsafe_arena_set_allocated_fullname(
    ::Entity::FullName* fullname) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fullname_);
  }
  fullname_ = fullname;
  if (fullname) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Entity.Student.fullname)
}
inline ::Entity::FullName* Student::release_fullname() {
  
  ::Entity::FullName* temp = fullname_;
  fullname_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Entity::FullName* Student::unsafe_arena_release_fullname() {
  // @@protoc_insertion_point(field_release:Entity.Student.fullname)
  
  ::Entity::FullName* temp = fullname_;
  fullname_ = nullptr;
  return temp;
}
inline ::Entity::FullName* Student::_internal_mutable_fullname() {
  
  if (fullname_ == nullptr) {
    auto* p = CreateMaybeMessage<::Entity::FullName>(GetArenaForAllocation());
    fullname_ = p;
  }
  return fullname_;
}
inline ::Entity::FullName* Student::mutable_fullname() {
  ::Entity::FullName* _msg = _internal_mutable_fullname();
  // @@protoc_insertion_point(field_mutable:Entity.Student.fullname)
  return _msg;
}
inline void Student::set_allocated_fullname(::Entity::FullName* fullname) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete fullname_;
  }
  if (fullname) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Entity::FullName>::GetOwningArena(fullname);
    if (message_arena != submessage_arena) {
      fullname = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fullname, submessage_arena);
    }
    
  } else {
    
  }
  fullname_ = fullname;
  // @@protoc_insertion_point(field_set_allocated:Entity.Student.fullname)
}

// repeated int32 arrayRatings = 3;
inline int Student::_internal_arrayratings_size() const {
  return arrayratings_.size();
}
inline int Student::arrayratings_size() const {
  return _internal_arrayratings_size();
}
inline void Student::clear_arrayratings() {
  arrayratings_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Student::_internal_arrayratings(int index) const {
  return arrayratings_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Student::arrayratings(int index) const {
  // @@protoc_insertion_point(field_get:Entity.Student.arrayRatings)
  return _internal_arrayratings(index);
}
inline void Student::set_arrayratings(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  arrayratings_.Set(index, value);
  // @@protoc_insertion_point(field_set:Entity.Student.arrayRatings)
}
inline void Student::_internal_add_arrayratings(::PROTOBUF_NAMESPACE_ID::int32 value) {
  arrayratings_.Add(value);
}
inline void Student::add_arrayratings(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_arrayratings(value);
  // @@protoc_insertion_point(field_add:Entity.Student.arrayRatings)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Student::_internal_arrayratings() const {
  return arrayratings_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Student::arrayratings() const {
  // @@protoc_insertion_point(field_list:Entity.Student.arrayRatings)
  return _internal_arrayratings();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Student::_internal_mutable_arrayratings() {
  return &arrayratings_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Student::mutable_arrayratings() {
  // @@protoc_insertion_point(field_mutable_list:Entity.Student.arrayRatings)
  return _internal_mutable_arrayratings();
}

// int32 average = 4;
inline void Student::clear_average() {
  average_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Student::_internal_average() const {
  return average_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Student::average() const {
  // @@protoc_insertion_point(field_get:Entity.Student.average)
  return _internal_average();
}
inline void Student::_internal_set_average(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  average_ = value;
}
inline void Student::set_average(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_average(value);
  // @@protoc_insertion_point(field_set:Entity.Student.average)
}

// -------------------------------------------------------------------

// StudentsGroup

// .Entity.StudentsGroup students_group = 1;
inline bool StudentsGroup::_internal_has_students_group() const {
  return this != internal_default_instance() && students_group_ != nullptr;
}
inline bool StudentsGroup::has_students_group() const {
  return _internal_has_students_group();
}
inline void StudentsGroup::clear_students_group() {
  if (GetArenaForAllocation() == nullptr && students_group_ != nullptr) {
    delete students_group_;
  }
  students_group_ = nullptr;
}
inline const ::Entity::StudentsGroup& StudentsGroup::_internal_students_group() const {
  const ::Entity::StudentsGroup* p = students_group_;
  return p != nullptr ? *p : reinterpret_cast<const ::Entity::StudentsGroup&>(
      ::Entity::_StudentsGroup_default_instance_);
}
inline const ::Entity::StudentsGroup& StudentsGroup::students_group() const {
  // @@protoc_insertion_point(field_get:Entity.StudentsGroup.students_group)
  return _internal_students_group();
}
inline void StudentsGroup::unsafe_arena_set_allocated_students_group(
    ::Entity::StudentsGroup* students_group) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(students_group_);
  }
  students_group_ = students_group;
  if (students_group) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Entity.StudentsGroup.students_group)
}
inline ::Entity::StudentsGroup* StudentsGroup::release_students_group() {
  
  ::Entity::StudentsGroup* temp = students_group_;
  students_group_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Entity::StudentsGroup* StudentsGroup::unsafe_arena_release_students_group() {
  // @@protoc_insertion_point(field_release:Entity.StudentsGroup.students_group)
  
  ::Entity::StudentsGroup* temp = students_group_;
  students_group_ = nullptr;
  return temp;
}
inline ::Entity::StudentsGroup* StudentsGroup::_internal_mutable_students_group() {
  
  if (students_group_ == nullptr) {
    auto* p = CreateMaybeMessage<::Entity::StudentsGroup>(GetArenaForAllocation());
    students_group_ = p;
  }
  return students_group_;
}
inline ::Entity::StudentsGroup* StudentsGroup::mutable_students_group() {
  ::Entity::StudentsGroup* _msg = _internal_mutable_students_group();
  // @@protoc_insertion_point(field_mutable:Entity.StudentsGroup.students_group)
  return _msg;
}
inline void StudentsGroup::set_allocated_students_group(::Entity::StudentsGroup* students_group) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete students_group_;
  }
  if (students_group) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Entity::StudentsGroup>::GetOwningArena(students_group);
    if (message_arena != submessage_arena) {
      students_group = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, students_group, submessage_arena);
    }
    
  } else {
    
  }
  students_group_ = students_group;
  // @@protoc_insertion_point(field_set_allocated:Entity.StudentsGroup.students_group)
}

// repeated .Entity.Student arrayStudents = 2;
inline int StudentsGroup::_internal_arraystudents_size() const {
  return arraystudents_.size();
}
inline int StudentsGroup::arraystudents_size() const {
  return _internal_arraystudents_size();
}
inline void StudentsGroup::clear_arraystudents() {
  arraystudents_.Clear();
}
inline ::Entity::Student* StudentsGroup::mutable_arraystudents(int index) {
  // @@protoc_insertion_point(field_mutable:Entity.StudentsGroup.arrayStudents)
  return arraystudents_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Entity::Student >*
StudentsGroup::mutable_arraystudents() {
  // @@protoc_insertion_point(field_mutable_list:Entity.StudentsGroup.arrayStudents)
  return &arraystudents_;
}
inline const ::Entity::Student& StudentsGroup::_internal_arraystudents(int index) const {
  return arraystudents_.Get(index);
}
inline const ::Entity::Student& StudentsGroup::arraystudents(int index) const {
  // @@protoc_insertion_point(field_get:Entity.StudentsGroup.arrayStudents)
  return _internal_arraystudents(index);
}
inline ::Entity::Student* StudentsGroup::_internal_add_arraystudents() {
  return arraystudents_.Add();
}
inline ::Entity::Student* StudentsGroup::add_arraystudents() {
  ::Entity::Student* _add = _internal_add_arraystudents();
  // @@protoc_insertion_point(field_add:Entity.StudentsGroup.arrayStudents)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Entity::Student >&
StudentsGroup::arraystudents() const {
  // @@protoc_insertion_point(field_list:Entity.StudentsGroup.arrayStudents)
  return arraystudents_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Entity

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Students_2eproto
